/**
 * This file contains the data layer simulating a database.
 *
 * Do NOT edit this file.
 */

// simulates a slow db query
const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

export class Db {
  createMessage = async (user: string, message: string) => {
    const id = (messages.at(-1)?.id ?? 0) + 1;
    messages.push({
      id,
      user,
      message,
      date: new Date(),
    });

    return id;
  };

  deleteMessage = async (id: number) => {
    const index = messages.findIndex((message) => message.id === id);
    if (index === -1) {
      return false;
    }

    messages.splice(index, 1);

    return true;
  };

  getMessage = async (id: number) => {
    return messages.find((message) => message.id === id);
  };

  getMessages = async (filter: Filter = {}) => {
    const { user, limit, offset, sort } = {
      limit: 10,
      offset: 0,
      sort: "asc",
      ...filter,
    };
    let messageList = [...messages];

    if (user) {
      // filtering is slow
      await sleep(1000);
      messageList = messages.filter((message) => message.user === user);
    }

    messageList.sort(
      (a, b) =>
        (a.date.getTime() - b.date.getTime()) * (sort === "asc" ? -1 : 1)
    );

    return messageList.slice(offset, offset + limit);
  };

  getUserMessageStats = async (user: string) => {
    const userMessages = messages.filter((message) => message.user === user);

    userMessages.sort((a, b) => a.date.getTime() - b.date.getTime());

    // compiling this info is slow
    await sleep(2000);

    return {
      totalMessages: userMessages.length,
      firstMessageDate: userMessages[0]?.date,
      lastMessageDate: userMessages[userMessages.length - 1]?.date,
    };
  };

  getTopUsers = async (limit: number) => {
    await sleep(1000 * limit);
    const userMessages = messages.reduce((acc, message) => {
      acc[message.user] ||= 0;
      acc[message.user] += 1;
      return acc;
    }, {} as Record<string, number>);

    const sortedUsers = Object.keys(userMessages).sort(
      (a, b) => userMessages[b] - userMessages[a]
    );

    return sortedUsers.slice(0, limit);
  };
}
type Filter = {
  limit?: number;
  offset?: number;
  user?: string;
  sort?: "asc" | "desc";
};

type Message = {
  id: number;
  user: string;
  message: string;
  date: Date;
};

const messages: Message[] = [
  {
    id: 0,
    user: "admin",
    message: "Hello, world!",
    date: new Date(2020, 1, 11),
  },
  {
    id: 1,
    user: "admin",
    message: "How are you?",
    date: new Date(2020, 1, 12),
  },
  {
    id: 2,
    user: "admin",
    message: "I'm doing well, thank you!",
    date: new Date(2020, 1, 13),
  },
  {
    id: 3,
    user: "admin",
    message: "How about you?",
    date: new Date(2020, 1, 14),
  },
  {
    id: 4,
    user: "admin",
    message: "I am so lonely...",
    date: new Date(2020, 1, 15),
  },
];
